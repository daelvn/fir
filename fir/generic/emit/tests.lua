local _module_0 = { }
local rep, find, match = string.rep, string.find, string.match
local trim
trim = function(input)
	do
		local n = find(input, "%S")
		if n then
			return match(input, ".*%S", n)
		else
			return ""
		end
	end
end
local fromMark
fromMark = function(mark, tag)
	if "T" == mark then
		return "True"
	elseif "t" == mark then
		return "truthy"
	elseif "F" == mark then
		return "False"
	elseif "f" == mark then
		return "falsy"
	elseif "E" == mark then
		return "matches_error"
	elseif "e" == mark then
		return "errors"
	elseif "n" == mark then
		return "near"
	elseif "u" == mark then
		return "unique"
	elseif ":" == mark then
		return "matches"
	elseif "=" == mark then
		return "equals"
	elseif "~" == mark then
		return "same"
	elseif "#" == mark then
		if not ("string" == type(tag)) then
			error("No tag specified while trying to use a luassert type assert")
		end
		return tag
	end
end
local KEYWORDS = {
	"and",
	"break",
	"do",
	"else",
	"elseif",
	"end",
	"false",
	"for",
	"function",
	"goto",
	"if",
	"in",
	"local",
	"nil",
	"not",
	"or",
	"repeat",
	"return",
	"then",
	"true",
	"until",
	"while"
}
local escapeName
escapeName = function(name)
	if name:match("^%d") then
		name = "_" .. name
	end
	for _index_0 = 1, #KEYWORDS do
		local keyword = KEYWORDS[_index_0]
		name = name:gsub(keyword, "_%0")
	end
	local escaped = name:gsub("[^a-zA-Z0-9_]", "_")
	return escaped
end
local emitTestHeader
emitTestHeader = function(node, count, options, append, prepend, placement)
	if not options.testHeaders then
		return count + 1
	end
	append("--- @test " .. tostring(placement) .. "#" .. tostring(count))
	append("--- Test for element " .. tostring(placement) .. " #" .. tostring(count))
	append("-- - **Type:** `" .. tostring(node.type) .. "`" .. tostring((node.type:match('luassert')) and (' (' .. (fromMark(node.mark)) .. ')') or ''))
	if node.tag then
		append("-- - **Tag:** `" .. tostring(node.tag) .. "`")
	end
	append("--:lua Test")
	append("-- " .. tostring(node.content[1]))
	if options.print then
		append("print '    " .. tostring(placement) .. "#" .. tostring(count) .. "'")
	end
	return count + 1
end
local emitInternal
emitInternal = function(description, options, append, prepend, placement)
	local ctrim = options.trim and trim or function(x)
		return x
	end
	local count = 1
	for _index_0 = 1, #description do
		local node = description[_index_0]
		local _exp_0 = node.type
		if "test" == _exp_0 then
			count = emitTestHeader(node, count, options, append, prepend, placement)
			append("assert" .. tostring(options.luassert and '.truthy' or '') .. "((" .. tostring(ctrim(node.content[1])) .. "), '" .. tostring(placement) .. ": Test failed')")
			append("")
		elseif "tagged-test" == _exp_0 then
			count = emitTestHeader(node, count, options, append, prepend, placement)
			append("if tags['" .. tostring(ctrim(node.tag)) .. "'] then assert" .. tostring(options.luassert and '.truthy' or '') .. "((" .. tostring(ctrim(node.content[1])) .. "), '" .. tostring(placement) .. ": Test failed') end")
			append("")
		elseif "verbatim-test" == _exp_0 then
			count = emitTestHeader(node, count, options, append, prepend, placement)
			append(ctrim(node.content[1]))
			append("")
		elseif "luassert-test" == _exp_0 then
			count = emitTestHeader(node, count, options, append, prepend, placement)
			append("assert" .. tostring(node.negated and '.not' or '') .. "." .. tostring(fromMark(node.mark)) .. "(" .. tostring(ctrim(node.content[1])) .. ")")
			append("")
		elseif "tagged-luassert-test" == _exp_0 then
			count = emitTestHeader(node, count, options, append, prepend, placement)
			if node.mark == "#" then
				append("assert" .. tostring(node.negated and '.not' or '') .. "." .. tostring(fromMark(node.mark, node.tag)) .. "(" .. tostring(ctrim(node.content[1])) .. ")")
			else
				append("if tags['" .. tostring(ctrim(node.tag)) .. "'] then assert" .. tostring(node.negated and '.not' or '') .. "." .. tostring(fromMark(node.mark, node.tag)) .. "(" .. tostring(ctrim(node.content[1])) .. ") end")
			end
			append("")
		end
	end
end
local emit
emit = function(ast, options)
	if options == nil then
		options = { }
	end
	local module = options.module or ast.title or error("Could not generate tests. Module name not found. Please set `options.module`.")
	local lua = {
		"---# Tests for " .. tostring(module) .. " #---",
		"-- This test suite was automatically generated from documentation comments,",
		"-- the tests are embedded in the code itself. Do not edit this file.",
		tostring(options.header or '')
	}
	local clength = 4
	local append
	append = function(x)
		if (not options.docs) and x:match("^%-%-") then
			return
		end
		lua[#lua + 1] = tostring(x)
	end
	local prepend
	prepend = function(x, offset)
		if offset == nil then
			offset = 0
		end
		if (not options.docs) and x:match("^%-%-") then
			return
		end
		table.insert(lua, clength + offset, tostring(x))
		clength = clength + 1
	end
	if options.trim == nil then
		options.trim = true
	end
	if options.luassert == nil then
		options.luassert = true
	end
	if options.print == nil then
		options.print = true
	end
	if options.testHeaders == nil then
		options.testHeaders = true
	end
	if options.docs == nil then
		options.docs = true
	end
	if options.unpack then
		prepend("--")
		prepend("-- **Unpacked methods**")
		local _list_0 = options.unpack
		for _index_0 = 1, #_list_0 do
			local name = _list_0[_index_0]
			prepend("-- - [`" .. tostring(name) .. "`](#" .. tostring(name) .. ")")
		end
	end
	if options.luassert then
		prepend("local assert = require('luassert')")
	end
	prepend("local M = require('" .. tostring(module) .. "')")
	if options.unpack then
		prepend("")
		prepend("--///--")
		prepend("-- unpack")
		local _list_0 = options.unpack
		for _index_0 = 1, #_list_0 do
			local name = _list_0[_index_0]
			prepend("local " .. tostring(escapeName(name)) .. " = M['" .. tostring(name) .. "'] -- " .. tostring(name))
		end
		prepend("--///--")
	end
	if options.snippet then
		prepend("")
		prepend(options.snippet)
	end
	prepend("")
	prepend("--///--")
	prepend("-- argument and tag initialization")
	prepend("local args, tags = {...}, {}")
	if options.all then
		prepend("setmetatable(tags, {__index=function() return true end})")
	end
	prepend("for _, v in ipairs(args) do tags[v] = true end")
	prepend("--///--")
	if ast.description then
		append("--# " .. tostring(options.subheader or 'General') .. " #--")
		append("-- Tests for the whole file are placed here.")
		if options.print then
			append("print '" .. tostring(options.subheader or 'General') .. " ->'")
		end
		append("")
		emitInternal(ast.description, options, append, prepend, ast.title)
	end
	for _index_0 = 1, #ast do
		local section = ast[_index_0]
		append("--# " .. tostring(section.section.name) .. " #--")
		append("-- Tests for " .. tostring(section.section.name) .. ".")
		if options.print then
			append("print '  " .. tostring(section.section.name) .. " ->'")
		end
		append("")
		emitInternal(section.section.description, options, append, prepend, section.section.name)
		for name, element in pairs(section.contents) do
			append("--# `" .. tostring(name) .. "`")
			append("")
			emitInternal(element.description, options, append, prepend, name)
		end
	end
	return table.concat(lua, "\n")
end
_module_0["emit"] = emit
return _module_0
