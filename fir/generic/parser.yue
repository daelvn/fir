---# fir.generic.parser #---
-- A parser that works with the format provided by the [generic backend](/fir/generic/backend).
--
-- You can see an example of parser output [here](/fir/examples/generic-parser.html).
{:match, :find, :gsub, :sub} = string

--# Utils #--
-- @internal
-- Several utils used internally.

--- @function sanitize :: input:string -> escaped:string
--- Takes any string and escapes it to work with patterns.
sanitize = (input) -> input\gsub "[%(%)%.%%%+%-%*%?%[%]%^%$]", "%%%0" if "string" == type input

--- @function trim :: input:string -> trimmed:string, n:number
--- Trims the whitespace at each end of a string.
-- Taken from [Lua-users wiki's StringTrim (`trim11`)](http://lua-users.org/wiki/StringTrim).
trim = (input) -> return if n := find input, "%S" then match input, ".*%S", n else ""

--# Helpers #--
-- Several functions that aid in the process of parsing.

--- @type DescriptionLine
--- A single element in a description returned by `parseDescription`
--:moon Format
-- DescriptionLine {
--   type      :: string (text|snippet|header)
--   content   :: [string]
--   language? :: string -- only when type is snippet
--   title?    :: string -- only when type is snippet
--   n?        :: number -- only when type is header
-- }

--- @function parseDescription :: description:[string] -> description:[DescriptionLine], tags:[string]
--- Parses codeblocks, tags, headers and normal text in descriptions.
-- Returns an array of DescriptionLines and an array of tags.
--# Notes
-- - In a codeblock, the first character of every line is removed (for a space).
--# Supported tags
-- - `@internal` - Adds an `internal` true flag to the element.
--///--
parseDescription = (desc) ->
  incode      = false
  ndesc, code, tags = {}, {}, {}
  for line in *desc
    -- close snippet
    if line == ":"
      ndesc[#ndesc+1] = code if incode
      incode = false
    -- add to snippet
    elseif incode
      code.content[#code.content+1] = sub line, 2
    -- tags
    elseif tag := match line, "^%s-@(%w+)(.-)"
      tag, value = match line, "^%s-@(%w+)(.-)"
      tags[tag] = (value == "") and true or value
    -- headers
    elseif header := match line, "^###%s+(.+)"
      ndesc[#ndesc+1] = {content: {trim header}, type: "header", n: 3}
    elseif header := match line, "^##%s+(.+)"
      ndesc[#ndesc+1] = {content: {trim header}, type: "header", n: 2}
    elseif header := match line, "^#%s+(.+)"
      ndesc[#ndesc+1] = {content: {trim header}, type: "header", n: 1}
    elseif headern := match line, "^(%d)%s+(.+)"
      header, n = match line, "^(%d)%s+(.+)"
      ndesc[#ndesc+1] = {content: {trim header}, type: "header", :n}
    -- tagged tests
    elseif taggedt := match line, "^%s-%?%?%s-(.-)%s-:%s-(.+)"
      tag, line = match line, "^%s-%?%?%s-(.-)%s-:%s-(.+)"
      ndesc[#ndesc+1] = {content: {line}, :tag, type: "tagged-test"}
    -- tests
    elseif match line, "%s-%?%?%s-(.+)"
      line = match line, "%s-%?%?%s-(.+)"
      ndesc[#ndesc+1] = {content: {line}, type: "test"}
    -- verbatim test lines (-- %?! .+)
    elseif verbatimt := match line, "%s-%?!%s-(.+)"
      ndesc[#ndesc+1] = {content: {verbatimt}, type: "verbatim-test"}
    -- TODO luassert tests (-- %?^?[TtFfenu:=~] .+)
    -- ^ - negates the assertion (optional)
    -- T - true
    -- t - truthy
    -- F - false
    -- f - falsy
    -- E - match error message
    -- e - errors
    -- n - near (actual >= expected - tolerance and actual <= expected + tolerance)
    -- u - unique
    -- : - matches
    -- = - equals
    -- ~ - same
    -- # - is <type> where <type> is the Tag (-- ?# string: "true")
    elseif match line, "%s-%?(%^?)([TtFfenu:=~])%s-(.-)%s-:%s-(.+)" -- tagged
      neg, mark, tag, line = match line, "%s-%?(%^?)([TtFfenu:=~])%s-(.-)%s-:%s-(.+)"
      ndesc[#ndesc+1] = {content: {line}, :tag, :mark, negated: (neg != ""), type: "tagged-luassert-test"}
    elseif match line, "%s-%?(%^?)([TtFfenu:=~])%s-(.+)" -- untagged
      neg, mark, line = match line, "%s-%?(%^?)([TtFfenu:=~])%s-(.+)"
      ndesc[#ndesc+1] = {content: {line}, :mark, negated: (neg != ""), type: "luassert-test"}
    -- snippets
    elseif snippet := match line, "^:(%w+)%s+(.+)"
      -- if there was a previous snippet open, close it
      ndesc[#ndesc+1] = code if incode
      -- init snippet
      language, title = match line, "^:(%w+)%s+(.+)"
      code            = {:language, :title, content: {}, type: "snippet"}
      incode          = true
    -- add line
    else
      ndesc[#ndesc+1] = {type: "text", content: {line\match " ?(.+)"}}
  -- add last and return
  ndesc[#ndesc+1] = code if incode
  return ndesc, tags
--///--

--- @function determineSummaryBoundary :: content:GenericComment.content, lead:string -> boundary:number
--- Gets the boundary line where a summary ends and the description begins
export determineSummaryBoundary = (content, lead) ->
  for i = 1, #content
    line = content[i]
    if line\match "^#{lead}%s+"
      continue
    else
      return i + 1
  return #content

--# API #--
-- This is the API provided to work with the generic parser.

--- @type GenericAST GenericSection GenericSectionContent GenericElement
--- The AST produced by `parse`.
--:moon Format
-- GenericAST {
--   title       :: string
--   description :: [DescriptionLine]
--   [n]         :: GenericSection { -- where n is the ID of the section
--     section :: GenericSectionDetails {
--       id          :: number
--       name        :: string
--       description :: [DescriptionLine]
--     }
--     content :: GenericSectionContent {
--       [name] :: GenericElement {
--         is          :: string (type|function|constant|class)
--         description :: [DescriptionLine]
--         name        :: [string] -- an array, meant to also contain aliases
--         summary     :: string
--         type        :: string -- only when `is` is `"function"` or `"constant"`
--       }
--     }
--   }
-- }

--- @function parse :: comments:[GenericComment], language:Language -> ast:GenericAST
--- Parses a list of GenericComments into a GenericAST
--///--
export parse = (comments, language) ->
  ast = {}
  -- get character for special comments
  lead = sanitize sub language.single, -1
  -- keep track of variables
  tracking = {
    editing: false             -- keep track of the part currently being edited, for fallbacks
    section: {id: 0, name: ""} -- keep track of the section being modified
  }
  -- strip lead function
  stripLead = (str) -> match (str or ""), "^#{lead}+%s+(.+)"
  -- iterate comments
  for comment in *comments
    heading = comment.content[1]
    summary_boundary = determineSummaryBoundary comment.content, lead
    -- top header
    if title := match heading, "^#{lead}#(.+)##{lead}.+"
      tracking.editing          = "title"
      ast.title                 = trim title
      ast.description, ast.tags = parseDescription [l for l in *comment.content[2,]]
    -- section
    elseif section := match heading, "^#(.+)#.+"
      tracking.editing             = "section"
      tracking.section             = {
        id:          tracking.section.id+1
        name:        trim section
      }
      tracking.section.description, tracking.section.tags = parseDescription [l for l in *comment.content[2,]]
      ast[tracking.section.id] = {section: tracking.section, contents: {}}
    -- function
    elseif fn := match heading, "^#{lead}%s+@function%s+(.+)%s+::(.+)"
      fn, typ = match heading, "^#{lead}%s+@function%s+(.+)%s+::(.+)"
      names = [name for name in fn\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@function #{main}: Functions must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "function"
        name:        names
        type:        typ
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[summary_boundary,]]
    -- type
    elseif typ := match heading, "^#{lead}%s+@type%s+(.+)"
      names = [name for name in typ\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@type #{main}: Types must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "type"
        name:        names
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- class
    elseif cls := match heading, "^#{lead}%s+@class%s+(.+)"
      names = [name for name in cls\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@class #{main}: Classes must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "class"
        name:        names
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- const/constant
    elseif cst := match heading, "^#{lead}%s+@consta?n?t?%s+(.+)%s+::(.+)"
      cst, typ = match heading, "^#{lead}%s+@consta?n?t?%s+(.+)%s+::(.+)"
      names = [name for name in cst\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@const #{main}: Classes must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "constant"
        name:        names
        type:        typ
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- test
    elseif test := match heading, "^#{lead}%s+@test%s+(.+)"
      names = [name for name in test\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@test #{main}: Tests must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "test"
        name:        names
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- table
    elseif tbl := match heading, "^#{lead}%s+@table%s+(.+)"
      names = [name for name in tbl\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@table #{main}: Tables must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "table"
        name:        names
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- field
    elseif field := match heading, "^#{lead}%s+@field%s+(.+)%s+::(.+)"
      fld, typ = match heading, "^#{lead}%s+@field%s+(.+)%s+::(.+)"
      names = [name for name in fld\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@field #{main}: Fields must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "field"
        name:        names
        type:        typ
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- var/variable
    elseif var := match heading, "^#{lead}%s+@vari?a?b?l?e?%s+(.+)%s+::(.+)"
      var, typ = match heading, "^#{lead}%s+@vari?a?b?l?e?%s+(.+)%s+::(.+)"
      names = [name for name in var\gmatch "%S+"]
      main = names[1]
      if (not ast[tracking.section.id]) or (not ast[tracking.section.id].contents)
        error "@var #{main}: Variables must be contained within a section."
      ast[tracking.section.id].contents[main] = {
        is:          "variable"
        name:        names
        type:        typ
        summary:     table.concat [stripLead comm for comm in *comment.content[2,summary_boundary]], '\n'
      }
      ast[tracking.section.id].contents[main].description, ast[tracking.section.id].contents[main].tags = parseDescription [l for l in *comment.content[3,]]
    -- text
    else
      switch tracking.editing
        when "title"
          ast.description[#ast.description+1] = {type: "text", content: {""}}
          for l in *(parseDescription comment.content) do ast.description[#ast.description+1] = l
        when "section"
          tracking.section.description[#tracking.section.description+1] = {type: "text", content: {""}}
          for l in *(parseDescription comment.content) do tracking.section.description[#tracking.section.description+1] = l
  -- return
  return ast
--///--

--///--
-- readFile = (f) ->
--   local content
--   with io.open f, "r"
--     content = \read "*a"
--     \close!
--   return content
-- import extract  from require "fir.generic.backend"
-- import generate from require "tableview"
-- print generate parse (extract (readFile "fir/generic/backend.moon"), {single: "--"}, {}), {single: "--"}
--///--
